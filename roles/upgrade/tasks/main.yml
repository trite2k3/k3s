---
- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false

- name: set k3s installed version
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Update node only if needed
  when: installed_k3s_version is version(k3s_version, '<')
  block:
    - name: Find k3s service files
      ansible.builtin.find:
        paths: "{{ systemd_dir }}"
        patterns: "k3s*.service"
      register: k3s_service_files

    - name: Save current k3s service
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ item.path }}.bak"
        remote_src: true
        mode: preserve
        force: true
      loop: "{{ k3s_service_files.files }}"

    - name: Install new k3s version
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      changed_when: true

    - name: Restore k3s service
      ansible.builtin.copy:
        src: "{{ item.path }}.bak"
        dest: "{{ item.path }}"
        remote_src: true
        mode: preserve
        force: true
      loop: "{{ k3s_service_files.files }}"

    - name: Restart k3s service [server]
      when: "server_group in group_names"
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: k3s

    - name: Restart k3s service [agent]
      when: "agent_group in group_names"
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: k3s-agent
