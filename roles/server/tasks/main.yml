---
- name: Get installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set installed version
  when: k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Download artifact
  when: k3s_version_output.rc != 0 or installed_k3s_version is version(k3s_version, '<')
  block:
    - name: Download k3s script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0750"

    - name: Download k3s bin
      ansible.builtin.command:
        cmd: /usr/local/bin/k3s-install.sh
      environment:
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      changed_when: true

- name: Optional config file (see inventory.yml)
  when: server_config_yaml is defined
  block:
    - name: Make config dir
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: "0750"
        state: directory
    - name: Copy config
      ansible.builtin.copy:
        content: "{{ server_config_yaml }}"
        dest: "/etc/rancher/k3s/config.yaml"
        mode: "0640"

- name: Init first server
  when: inventory_hostname == groups[server_group][0]
  block:
    - name: Copy K3s service file [HA]
      ansible.builtin.template:
        src: "k3s-cluster-init.service.j2"
        dest: "{{ system_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0640"

- name: Add service env vars
  when: extra_service_envs is defined
  ansible.builtin.lineinfile:
    path: "{{ system_dir }}/k3s.service.env"
    line: "{{ item }}"
  with_items: "{{ extra_service_envs }}"

- name: Enable k3s service
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state:started
    enabled: true

- name: Pause for first server startup
  ansible.builtin.pause:
    seconds: 30

- name: Check kubectl control node
  ansible.builtin.command: 'kubectl'
  register: kubectl_installed
  ignore_errors: true
  delegate_to: 127.0.0.1
  become: false
  changed_when: false

- name: Apply k3s kubeconfig to control node
  when: kubectl_installed.rc == 0
  block:
    - name: Copy kubeconfig to control node
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ kubeconfig }}"
        flat: true

    - name: Change server address in kubeconfig on control node
      ansible.builtin.shell: |
        KUBECONFIG={{ kubeconfig }} kubectl config set-cluster default --server=https://{{ api_endpoint }}:{{ api_port }}
      delegate_to: 127.0.0.1
      become: false
      register: csa_result
      changed_when:
        - csa_result.rc == 0

    - name: Setup kubeconfig context on control node - {{ cluster_context }}
      when: kubeconfig != "~/kube.config"
      ansible.builtin.replace:
        path: "{{ kubeconfig }}"
        regexp: 'name: default'
        replace: 'name: {{ cluster_context }}'
      delegate_to: 127.0.0.1
      become: false

    - name: Merge config if already exist on node
      when: kubeconfig != "~/.kube/config"
      ansible.builting.shell: |
        TFILE=$(mktemp)
        KUBECONFIG={{ kubeconfig }} kubectl config set-context {{ cluster_context }} --user={{ cluster_context }} --cluster={{ cluster_context }}
        KUBECONFIG={{ kubeconfig }} kubectl config view --flatten > ${TFILE}
        mv ${TFILE} {{ kubeconfig }}
      delegate_to: 127.0.0.1
      become: false
      register: mv_result
      changed_when:
        - mv_result.rc == 0

- name: Start other server it any and verify
  when:
    - (groups[server_group] | length) > 1
    - inventory_hostname != groups[server_group][0]
  block:
    - name: Copy k3s service file [HA]
      when: groups[server_group] | length > 1
      ansible.builtin.template:
        src: "k3s-ha.service.j2"
        dest: "{{ system_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0640"

    - name: Enable and check k3s service
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Verify all nodes joined
      when: (groups[server_group] | length) > 1
      ansible.builtin.command:
        cmd: >
          k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups[server_group] | length)
      retries: 20
      delay: 10
      changed_when: false
